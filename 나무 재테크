// Baekjoon.cpp: 콘솔 응용 프로그램의 진입점을 정의합니다.
//


#include "stdafx.h"
#include <iostream>
#include <algorithm>
#include <vector>
#include <queue>
using namespace std;

#define R first;
#define C second;
int alive,dead = 11;
int dirr[8] = { -1,-1,-1,0,0,1,1,1 };
int dirr[8] = { -1,0,1,-1,1,-1,0,1 };
int T, x, y, tage;
int N,M,K;
int seasons;
struct L
{
	vector<int> tree;
	int energy =5;
	int refuel;

};

void spring(L** A)
{
	for (int i = 1;i < N;i++)
	{
		for (int j = 1;j < N;j++)
		{
			if (A[i][j].tree.size() == 0)
				continue;
			if (A[i][j].tree.size()>1)
				sort(A[i][j].tree.begin(), A[i][j].tree.end());
			for (int k = 0;k < A[i][j].tree.size();k++)
			{
				int temp;
				temp = A[i][j].energy - A[i][j].tree[k];
				if (temp < 0) {
					A[i][j].tree[k] = A[i][j].tree[k] - dead;
				}
				else {
					A[i][j].tree[k]++;
					A[i][j].energy = temp;
				}
			}
		}
	}
}

void summer(L& A)
{
	int 

}
void autumn(L& A)
{

}
void winter(L& A)
{

}
int main()
{
	L A[11][11];
	cin >> N >> M >> K;
	for (int r=1;r < N;r++){
		for (int c=1;c < N;c++) {
			cin >> T;
			A[r][c].refuel = T;

		}
	}
	for (int i = 1;i < M;i++) {
			cin >> x >> y >> tage;
			A[x][y].tree.push_back(tage);
	}


}
