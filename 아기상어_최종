// Baekjoon.cpp: 콘솔 응용 프로그램의 진입점을 정의합니다.
//
#include <iostream>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <queue>
#define _CRT_SECURE_NO_WARNINGS
using namespace std;
#define X first
#define Y second
int N, T, gotfood;
int K[20][20];
int dirX[4] = { -1,0,0,1 };
int dirY[4] = { 0,-1,1,0 };
struct S
{
	int sharksize = 2;
	int x;
	int y;
	int sec = 0;
};
bool cmp(pair<int, int> a, pair<int, int> b)
{
	if (a.X < b.X)
		//return a > b;
		return true;
	else if (a.X == b.X)
		if (a.Y < b.Y)
			//	return a > b;
			return true;
		//else return a < b;
		else
			return false;

	//return a < b;
	return false;
}

bool OOB(int a, int b)
{
	return a < 0 or a >= N or b < 0 or b >= N;
}

S GetTheFood(S shark)
{ 
	vector<pair<int,int>> caught;
	int found = 0;
	int board[20][20];
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++)
		{
			board[i][j] = K[i][j];
		}
	}
	queue<pair<int, int>> Q;
	Q.push({ shark.x,shark.y });
	board[shark.x][shark.y] = -1;
	while (!Q.empty())
	{
		pair<int, int> cur = Q.front(); Q.pop();
		if (board[cur.X][cur.Y] == found) break;
		for (int dir = 0; dir < 4; dir++)
		{
			int nx = cur.X + dirX[dir];
			int ny = cur.Y + dirY[dir];

			if (OOB(nx, ny) or board[nx][ny] < 0) //outofbounce or have visited
				continue;
			if (board[nx][ny] == 0)
			{
				Q.push({ nx,ny });
				board[nx][ny] = board[cur.X][cur.Y] - 1;
			}
			if (board[nx][ny] > shark.sharksize)
				continue;
			if (board[nx][ny] == shark.sharksize)
			{
				Q.push({ nx,ny });
				board[nx][ny] = board[cur.X][cur.Y] - 1;
			}
			if (0 < board[nx][ny] and board[nx][ny] < shark.sharksize)
			{
				caught.push_back({nx, ny});
				board[nx][ny] = board[cur.X][cur.Y] - 1;
				found = board[nx][ny];
			}
		}
	}
	if (found != 0)
	{
		if (caught.size() > 1) {
			sort(caught.begin(), caught.end(), cmp);
		}
		shark.x = caught[0].X; shark.y = caught[0].Y;
		gotfood++;
		shark.sec = shark.sec + abs(found) -1;
		return shark;
	}
	shark.x = -9; shark.y = -9;
	return shark;
}


int main()
{
	S shark;
	cin >> N;
	for (int i = 0; i < N; i++) {
		for (int j = 0; j < N; j++) {

			cin >> T;
			K[i][j] = T;
			if (T == 9) {
				shark.x = i;
				shark.y = j;
			}
		}
	}
	queue<S> q;
	q.push(shark);
	while (!q.empty()) {
		S temp = q.front(); q.pop();
		K[temp.x][temp.y] = 0;
		shark = GetTheFood(temp);
		if (shark.x == -9 and shark.y == -9) {
			break;
		}
		else
		{
			K[shark.x][shark.y] = 0;

			if (gotfood == shark.sharksize) {
				shark.sharksize++;
				gotfood = 0;
			}
			q.push(shark);
		}
	}

	cout << shark.sec << "\n";
	return 0;
}
